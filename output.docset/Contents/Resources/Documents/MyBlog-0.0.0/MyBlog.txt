-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package MyBlog
@version 0.0.0


-- | Settings are centralized, as much as possible, into this file. This
--   includes database connection settings, static file locations, etc. In
--   addition, you can configure a number of different aspects of Yesod by
--   overriding methods in the Yesod typeclass. That instance is declared
--   in the Foundation.hs file.
module Settings

-- | Runtime settings to configure this application. These settings can be
--   loaded from various sources: defaults, environment variables, config
--   files, theoretically even a database.
data AppSettings
AppSettings :: String -> PostgresConf -> Maybe Text -> HostPreference -> Int -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Text -> Maybe Text -> Bool -> AppSettings

-- | Directory from which to serve static files.
[appStaticDir] :: AppSettings -> String

-- | Configuration settings for accessing the database.
[appDatabaseConf] :: AppSettings -> PostgresConf

-- | Base for all generated URLs. If <tt>Nothing</tt>, determined from the
--   request headers.
[appRoot] :: AppSettings -> Maybe Text

-- | Host/interface the server should bind to.
[appHost] :: AppSettings -> HostPreference

-- | Port to listen on
[appPort] :: AppSettings -> Int

-- | Get the IP address from the header when logging. Useful when sitting
--   behind a reverse proxy.
[appIpFromHeader] :: AppSettings -> Bool

-- | Use detailed request logging system
[appDetailedRequestLogging] :: AppSettings -> Bool

-- | Should all log messages be displayed?
[appShouldLogAll] :: AppSettings -> Bool

-- | Use the reload version of templates
[appReloadTemplates] :: AppSettings -> Bool

-- | Assume that files in the static dir may change after compilation
[appMutableStatic] :: AppSettings -> Bool

-- | Perform no stylesheet/script combining
[appSkipCombining] :: AppSettings -> Bool

-- | Copyright text to appear in the footer of the page
[appCopyright] :: AppSettings -> Text

-- | Google Analytics code
[appAnalytics] :: AppSettings -> Maybe Text

-- | Indicate if auth dummy login should be enabled.
[appAuthDummyLogin] :: AppSettings -> Bool

-- | Settings for <a>widgetFile</a>, such as which template languages to
--   support and default Hamlet settings.
--   
--   For more information on modifying behavior, see:
--   
--   <a>https://github.com/yesodweb/yesod/wiki/Overriding-widgetFile</a>
widgetFileSettings :: WidgetFileSettings

-- | How static files should be combined.
combineSettings :: CombineSettings
widgetFile :: String -> Q Exp

-- | Raw bytes at compile time of <tt>config/settings.yml</tt>
configSettingsYmlBS :: ByteString

-- | <tt>config/settings.yml</tt>, parsed to a <tt>Value</tt>.
configSettingsYmlValue :: Value

-- | A version of <tt>AppSettings</tt> parsed at compile time from
--   <tt>config/settings.yml</tt>.
compileTimeAppSettings :: AppSettings
combineStylesheets :: Name -> [Route Static] -> Q Exp
combineScripts :: Name -> [Route Static] -> Q Exp
instance Data.Aeson.Types.FromJSON.FromJSON Settings.AppSettings

module Settings.StaticFiles
fonts_glyphicons_halflings_regular_woff :: StaticRoute
fonts_glyphicons_halflings_regular_ttf :: StaticRoute
fonts_glyphicons_halflings_regular_svg :: StaticRoute
fonts_glyphicons_halflings_regular_eot :: StaticRoute
css_bootstrap_css :: StaticRoute

module Model
data User
User :: !Text -> !(Maybe Text) -> User
[userIdent] :: User -> !Text
[userPassword] :: User -> !(Maybe Text)
type UserId = Key User
data Email
Email :: !Text -> !(Maybe (Key User)) -> !(Maybe Text) -> Email
[emailEmail] :: Email -> !Text
[emailUserId] :: Email -> !(Maybe (Key User))
[emailVerkey] :: Email -> !(Maybe Text)
type EmailId = Key Email
data Comment
Comment :: !Text -> !(Maybe (Key User)) -> Comment
[commentMessage] :: Comment -> !Text
[commentUserId] :: Comment -> !(Maybe (Key User))
type CommentId = Key Comment
migrateAll :: Migration
instance GHC.Show.Show Model.Comment
instance GHC.Classes.Eq Model.Comment
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Model.User)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Model.User)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.User)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.User)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Model.Email)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Model.Email)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.Email)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.Email)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Email)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Email)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.Email)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.Email)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.Email)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.Email)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.Email)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance Web.Internal.HttpApiData.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance Web.Internal.HttpApiData.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.Comment)
instance Database.Persist.Class.PersistField.PersistField Model.User
instance Database.Persist.Sql.Class.PersistFieldSql Model.User
instance Database.Persist.Class.PersistField.PersistField Model.Email
instance Database.Persist.Sql.Class.PersistFieldSql Model.Email
instance Database.Persist.Class.PersistField.PersistField Model.Comment
instance Database.Persist.Sql.Class.PersistFieldSql Model.Comment
instance Database.Persist.Class.PersistEntity.PersistEntity Model.User
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Model.User
instance Database.Persist.Class.PersistEntity.PersistEntity Model.Email
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Model.Email
instance Database.Persist.Class.PersistEntity.PersistEntity Model.Comment
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.Internal.SqlBackend Model.Comment
instance Data.Aeson.Types.ToJSON.ToJSON Model.Comment
instance Data.Aeson.Types.FromJSON.FromJSON Model.Comment
instance Data.Aeson.Types.ToJSON.ToJSON (Database.Persist.Class.PersistEntity.Entity Model.Comment)
instance Data.Aeson.Types.FromJSON.FromJSON (Database.Persist.Class.PersistEntity.Entity Model.Comment)

module Import.NoFoundation

module Foundation

-- | The foundation datatype for your application. This can be a good place
--   to keep settings and values requiring initialization before your
--   application starts running, such as database connections. Every
--   handler will have access to the data present here.
data App
App :: AppSettings -> Static -> ConnectionPool -> Manager -> Logger -> App
[appSettings] :: App -> AppSettings

-- | Settings for static file serving.
[appStatic] :: App -> Static

-- | Database connection pool.
[appConnPool] :: App -> ConnectionPool
[appHttpManager] :: App -> Manager
[appLogger] :: App -> Logger
data MenuItem
MenuItem :: Text -> Route App -> Bool -> MenuItem
[menuItemLabel] :: MenuItem -> Text
[menuItemRoute] :: MenuItem -> Route App
[menuItemAccessCallback] :: MenuItem -> Bool
data MenuTypes
NavbarLeft :: MenuItem -> MenuTypes
NavbarRight :: MenuItem -> MenuTypes
type Handler = HandlerT App IO
type Widget = WidgetT App IO ()
resourcesApp :: [ResourceTree String]

-- | A convenient synonym for creating forms.
type Form x = Html -> MForm (HandlerT App IO) (FormResult x, Widget)

-- | Access function to determine if a user is logged in.
isAuthenticated :: Handler AuthResult
unsafeHandler :: App -> Handler a -> IO a
instance GHC.Read.Read (Yesod.Routes.Class.Route Foundation.App)
instance GHC.Classes.Eq (Yesod.Routes.Class.Route Foundation.App)
instance GHC.Show.Show (Yesod.Routes.Class.Route Foundation.App)
instance Yesod.Routes.Class.ParseRoute Foundation.App
instance Yesod.Routes.Class.RenderRoute Foundation.App
instance Yesod.Routes.Class.RouteAttrs Foundation.App
instance Yesod.Core.Class.Yesod.Yesod Foundation.App
instance Yesod.Core.Class.Breadcrumbs.YesodBreadcrumbs Foundation.App
instance Yesod.Persist.Core.YesodPersist Foundation.App
instance Yesod.Persist.Core.YesodPersistRunner Foundation.App
instance Yesod.Auth.YesodAuth Foundation.App
instance Yesod.Auth.YesodAuthPersist Foundation.App
instance Text.Shakespeare.I18N.RenderMessage Foundation.App Yesod.Form.Types.FormMessage
instance Network.HTTP.Client.Types.HasHttpManager Foundation.App

module Import

module Handler.Comment
postCommentR :: Handler Value


-- | Common handler functions.
module Handler.Common
getFaviconR :: Handler TypedContent
getRobotsR :: Handler TypedContent

module Handler.Home
data FileForm
FileForm :: FileInfo -> Text -> FileForm
[fileInfo] :: FileForm -> FileInfo
[fileDescription] :: FileForm -> Text
getHomeR :: Handler Html
postHomeR :: Handler Html
sampleForm :: Form FileForm
commentIds :: (Text, Text, Text)

module Handler.Profile
getProfileR :: Handler Html

module Application

-- | For yesod devel, return the Warp settings and WAI Application.
getApplicationDev :: IO (Settings, Application)

-- | The <tt>main</tt> function for an executable running this site.
appMain :: IO ()

-- | main function for use by yesod devel
develMain :: IO ()

-- | This function allocates resources (such as a database connection
--   pool), performs initialization and returns a foundation datatype
--   value. This is also the place to put your migrate statements to have
--   automatic database migrations handled by Yesod.
makeFoundation :: AppSettings -> IO App
makeLogWare :: App -> IO Middleware
getApplicationRepl :: IO (Int, App, Application)
shutdownApp :: App -> IO ()

-- | Run a handler
handler :: Handler a -> IO a

-- | Run DB queries
db :: ReaderT SqlBackend (HandlerT App IO) a -> IO a
instance Yesod.Core.Class.Dispatch.YesodDispatch Foundation.App
